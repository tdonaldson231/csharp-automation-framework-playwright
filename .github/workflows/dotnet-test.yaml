name: Build and Run .NET Tests

on:
  workflow_dispatch:
    inputs:
      test_env:
        description: "Test Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - integration

      test_category:
        description: "Test Category"
        required: true
        default: "smoke"
        type: choice
        options:
          - smoke
          - regression
          - journeys
          - integration

env:
  IMAGE_NAME: "test-image"
  IMAGE_TAG: "latest"

permissions:
  contents: read
  checks: write  # explicitly allow check run writing

jobs:
  run-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Start MySQL with Docker Compose
        run: |
          docker compose -f Config/Sql/docker-compose.yml up -d
          docker compose -f Config/Sql/docker-compose.yml ps

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG .

      - name: Run .NET Tests
        run: |
          mkdir -p test-results
          docker run --rm \
          --network sql_test-network \
          -e TEST_ENV=${{ github.event.inputs.test_env }} \
          -e TEST_CATEGORY=${{ github.event.inputs.test_category }} \
          -v ${{ github.workspace }}/test-results:/app/TestResults \
          -v ${{ github.workspace }}/Reports:/app/Reports \
          $IMAGE_NAME:$IMAGE_TAG \
          /bin/bash -c "dotnet test AutomationFrameworkRepo_v03.sln --settings Tests/RunSettings/${{ github.event.inputs.test_env }}.runsettings --filter TestCategory=${{ github.event.inputs.test_category }} --logger trx;LogFileName=test_results.trx && find / -type f -name 'ExtentReport*.html' 2>/dev/null"


      - name: Publish .trx Results
        uses: dorny/test-reporter@v1
        if: always()  # Show results even if tests fail
        with:
          name: .NET Test Results
          path: 'test-results/test_results.trx'
          reporter: dotnet-trx
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }} 

      - name: Debug Reports
        run: |
          pwd
          ls -la
          find / -type f -name 'ExtentReport*.html' 2>/dev/null

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        if: always()  # Show results even if tests fail
        with:
          name: TestReport
          path: 'test-results/ExtentReport_*.html'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }} 