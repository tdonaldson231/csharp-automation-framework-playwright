trigger: none  # No automatic trigger; running manually for now.

parameters:
- name: gitRepoUrl
  displayName: 'GitHub Repo URL'
  type: string
  default: 'https://github.com/tdonaldson231/csharp-automation-framework-playwright.git'

- name: gitBranch
  displayName: 'GitHub Branch to Clone'
  type: string
  default: 'main'

- name: testCategory
  displayName: Test Category
  type: string
  default: smoke

- name: testEnvironment
  displayName: Test Environment
  type: string
  default: dev

stages:
- stage: Test
  displayName: Build and Run Tests in Docker
  jobs:
  - job: RunDockerTests
    displayName: Docker Test Runner
    pool:
      name: default

    variables:
      TEST_ENV: ${{ parameters.testEnvironment }}
      TEST_CATEGORY: ${{ parameters.testCategory }}

    steps:
    - checkout: self
      persistCredentials: true
    
    - script: |
        if exist csharp-automation-framework-playwright (
          echo Deleting existing directory...
          rmdir /s /q csharp-automation-framework-playwright
        )
        git clone -b ${{ parameters.gitBranch }} ${{ parameters.gitRepoUrl }}
      displayName: 'Clean and Clone GitHub Repo Branch'

    - task: Docker@2
      displayName: Build Docker Image
      inputs:
        command: build
        dockerfile: $(Build.SourcesDirectory)/csharp-automation-framework-playwright/Dockerfile
        buildContext: $(Build.SourcesDirectory)/csharp-automation-framework-playwright
        tags: |
          test-image

    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/test-results
        docker run --rm -e TEST_ENV=${{ parameters.testEnvironment }} -e TEST_CATEGORY=${{ parameters.testCategory }} -v $(Build.ArtifactStagingDirectory)/test-results:/app/Tests/Results test-image
      displayName: 'Run Docker Image with TEST_ENV and TEST_CATEGORY'
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: '/app/TestResults/Tests/Results'
        Contents: '**/*.trx'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/test-results'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/test-results/*.trx'
        searchFolder: '$(Build.ArtifactStagingDirectory)/test-results'
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/test-results'
        ArtifactName: 'TestReports'
        publishLocation: 'Container'
