trigger: none  # No automatic trigger; running manually for now.

parameters:
- name: githubTestFrameworkRepo
  displayName: 'GitHub Test Framework Repo'
  type: string
  default: 'https://github.com/tdonaldson231/csharp-automation-framework-playwright.git'

- name: githubTestFrameworkBranch
  displayName: 'GitHub Test Framework Branch to Clone'
  type: string
  default: 'main'

- name: githubWiremockServerRepo
  displayName: 'GitHub Wiremock Server Repo'
  type: string
  default: 'https://github.com/tdonaldson231/wiremock-server.git'

- name: githubWiremockServerBranch
  displayName: 'GitHub Wiremock Server Branch to Clone'
  type: string
  default: 'main'

- name: testCategory
  displayName: Test Category
  type: string
  default: smoke

- name: testEnvironment
  displayName: Test Environment
  type: string
  default: dev

- name: mySqlServer
  displayName: MySql DB Name
  type: string
  default: mysql-db

- name: dockerRepository
  displayName: Docker Repository
  type: string
  default: todddonaldson22

- name: imageName
  displayName: Docker Image Name
  type: string
  default: test-image

- name: imageTag
  displayName: Docker Image Tag
  type: string
  default: v0.0.3  ## latest  ## $(Build.BuildNumber)

variables:
- group: docker-secrets  # Replace with your actual variable group name

- name: DOCKER_REPOSITORY
  value: ${{ parameters.dockerRepository }}

- name: IMAGE_NAME
  value: ${{ parameters.imageName }}

- name: IMAGE_TAG
  value: ${{ parameters.imageTag }}
  
- name: ENV_NAME
  value: ${{ parameters.testEnvironment }}

stages:
- stage: Test
  displayName: Build and Run Test Framework in Docker

  jobs:
  - job: RunDockerTests
    displayName: Docker Test Runner
    pool:
      name: default

    steps:
    - checkout: self
      persistCredentials: true

    - script: |
        if exist csharp-automation-framework-playwright (
          echo Deleting existing test framework directory...
          rmdir /s /q csharp-automation-framework-playwright
        )
        git clone -b ${{ parameters.githubTestFrameworkBranch }} ${{ parameters.githubTestFrameworkRepo }}
      displayName: 'Clean and Clone Test Framework Repo'

    - script: |
        if exist wiremock-server (
          echo Deleting existing wiremock-server directory...
          rmdir /s /q wiremock-server
        )
        git clone -b ${{ parameters.githubWiremockServerBranch }} ${{ parameters.githubWiremockServerRepo }}
      displayName: 'Clone WireMock Server Repo'

    - task: DockerInstaller@0
  
    - script: |
        echo Stopping containers using the network (if any)...

        for /F %%i in ('docker ps -q --filter "network=shared-test-network"') do (
            echo Stopping container %%i
            docker stop %%i
            echo Removing container %%i
            docker rm %%i
        )

        echo Attempting to remove shared-test-network...
        docker network rm shared-test-network

        echo Creating shared-test-network...
        docker network create shared-test-network
      displayName: 'Ensure Shared Network is Clean'      

    - script: |
        docker-compose -f docker-compose.yml up -d --build
      displayName: 'Start WireMock Server'
      workingDirectory: $(Build.SourcesDirectory)/wiremock-server
      env:
        MOCK_ENV: $(ENV_NAME)
      
    - script: |
        docker-compose up -d --build
      workingDirectory: $(Build.SourcesDirectory)/csharp-automation-framework-playwright
      displayName: 'Run docker-compose with secrets'
      env:
        MYSQL_SERVER: ${{ parameters.mySqlServer }}
        MYSQL_DATABASE: $(MYSQL_DATABASE)
        MYSQL_USER: $(MYSQL_USER)
        MYSQL_PASSWORD: $(MYSQL_PASSWORD)
        MYSQL_ROOT_PASSWORD: $(MYSQL_ROOT_PASSWORD)
      
    - script: |
        echo Checking if image exists: %DOCKER_REPOSITORY%/%IMAGE_NAME%:%IMAGE_TAG%
        docker pull %DOCKER_REPOSITORY%/%IMAGE_NAME%:%IMAGE_TAG%
        IF %ERRORLEVEL% EQU 0 (
            echo Image exists? true
            echo ##vso[task.setvariable variable=imageExists]true
        ) ELSE (
            echo Image exists? false
            echo ##vso[task.setvariable variable=imageExists]false
        )
      displayName: 'Check if Docker image exists'
      continueOnError: true
            
    - task: Docker@2
      displayName: 'Build and push Docker image if it does not exist'
      condition: ne(variables['imageExists'], 'true')
      inputs:
        containerRegistry: DockerHubConnection
        repository: ${{ parameters.dockerRepository }}/$(IMAGE_NAME)
        command: buildAndPush
        Dockerfile: '**/Dockerfile'
        tags: |
          $(IMAGE_TAG)
          
    - script: |
        docker pull ${{ parameters.dockerRepository }}/$(IMAGE_NAME):$(IMAGE_TAG)
      condition: eq(variables['imageExists'], 'true')
      displayName: 'Pull down Docker image if it does exist'
      
    - script: |
        echo "Docker image ready: ${{ parameters.dockerRepository }}/$(IMAGE_NAME):$(IMAGE_TAG)"
      displayName: 'Docker Image Confirmation'

    - script: |
        docker ps -a
        docker network ls
        docker network inspect shared-test-network
      displayName: 'Debug Docker containers and network'

    - script: docker logs mysql-db
      displayName: 'Dump MySQL logs for debugging'
            
    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/test-results
        docker run --rm --network shared-test-network -e TEST_ENV=$(ENV_NAME) -e TEST_CATEGORY=${{ parameters.testCategory }} -e MYSQL_SERVER=${{ parameters.mySqlServer }} -e MYSQL_DATABASE=$(MYSQL_DATABASE) -e MYSQL_USER=$(MYSQL_USER) -e MYSQL_PASSWORD=$(MYSQL_PASSWORD) -v $(Build.ArtifactStagingDirectory)/test-results:/app/TestResults ${{ parameters.dockerRepository }}/$(IMAGE_NAME):$(IMAGE_TAG)
      displayName: 'Run Docker Image'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results (.trx)'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/test-results/*.trx'
        searchFolder: '$(Build.ArtifactStagingDirectory)/test-results'
      condition: succeededOrFailed()
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Test Reports Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/test-results'
        ArtifactName: 'TestReports'
        publishLocation: 'Container'

    # Stop the mock server (WireMock)
    - script: docker-compose -f docker-compose.yml down --remove-orphans
      displayName: 'Stop WireMock Server'
      workingDirectory: $(Build.SourcesDirectory)/wiremock-server

    # Stop the database container (MySql)
    - script: docker-compose -f docker-compose.yml down --remove-orphans --volumes
      displayName: 'Stop MySQL container'
      workingDirectory: $(Build.SourcesDirectory)/csharp-automation-framework-playwright
