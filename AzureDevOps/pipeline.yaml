trigger: none  # No automatic trigger; running manually for now.

parameters:
- name: gitRepoUrl
  displayName: 'GitHub Repo URL'
  type: string
  default: 'https://github.com/tdonaldson231/csharp-automation-framework-playwright.git'

- name: gitBranch
  displayName: 'GitHub Branch to Clone'
  type: string
  default: 'main'

- name: testCategory
  displayName: Test Category
  type: string
  default: smoke

- name: testEnvironment
  displayName: Test Environment
  type: string
  default: dev

- name: imageName
  displayName: Docker Image Name
  type: string
  default: test-image

# ?? Add this section below parameters
variables:
- group: docker-secrets  # Replace with your actual variable group name

- name: imageName
  value: ${{ parameters.imageName }}

- name: imageTag
  value: $(Build.BuildNumber)

stages:
- stage: Test
  displayName: Build and Run Tests in Docker

  jobs:
  - job: RunDockerTests
    displayName: Docker Test Runner
    pool:
      name: default

    variables:
      imageName: ${{ parameters.imageName }}
      imageTag: $(Build.BuildNumber)
      group: docker-secrets

    steps:
    - checkout: self
      persistCredentials: true

    # Clean and clone the test framework repo
    - script: |
        if exist csharp-automation-framework-playwright (
          echo Deleting existing directory...
          rmdir /s /q csharp-automation-framework-playwright
        )
        git clone -b ${{ parameters.gitBranch }} ${{ parameters.gitRepoUrl }}
      displayName: 'Clean and Clone Test Framework Repo'

    # Clone the wiremock-server repo
    - script: |
        if exist wiremock-server (
          echo Deleting existing wiremock-server directory...
          rmdir /s /q wiremock-server
        )
        git clone -b initial-wiremock-server-setup https://github.com/tdonaldson231/wiremock-server.git
      displayName: 'Clone WireMock Server Repo'

    - task: DockerInstaller@0
  
    - script: |
        echo Stopping containers using the network (if any)...

        for /F %%i in ('docker ps -q --filter "network=shared-test-network"') do (
            echo Stopping container %%i
            docker stop %%i
            echo Removing container %%i
            docker rm %%i
        )

        echo Attempting to remove shared-test-network...
        docker network rm shared-test-network

        echo Creating shared-test-network...
        docker network create shared-test-network
      displayName: 'Ensure Shared Network is Clean'




    # Start the mock server (WireMock)
    - script: docker-compose -f docker-compose.yml up -d --build
      displayName: 'Start WireMock Server'
      workingDirectory: $(Build.SourcesDirectory)/wiremock-server

    # Start MySQL container
    - script: docker-compose -f Config/Sql/docker-compose.yml up -d --build
      displayName: 'Start MySQL container'
      workingDirectory: $(Build.SourcesDirectory)/csharp-automation-framework-playwright

    # List all running containers
    - script: docker ps -a
      displayName: 'List running containers'



    # Login to DockerHub
    - script: echo "Logging in as $(DOCKERHUB_USERNAME)"
      displayName: 'Show Docker Username (Debug)'

    - script: echo "$(DOCKERHUB_PASSWORD)" | docker login -u $(DOCKERHUB_USERNAME) --password-stdin
      displayName: 'Secure Login to DockerHub'

    # Try to pull the image from DockerHub, build if not found
    - script: |
        echo "Attempting to pull image $(imageName):$(imageTag) from DockerHub..."
        docker pull donaldsontodd22/$(imageName):$(imageTag) || (
          echo "Image not found, building locally..."
          docker build -t donaldsontodd22/$(imageName):$(imageTag) .
          echo "Pushing newly built image to DockerHub..."
          docker push donaldsontodd22/$(imageName):$(imageTag)
        )
      displayName: 'Pull or Build Docker Image'
      workingDirectory: $(Build.SourcesDirectory)/csharp-automation-framework-playwright

    # Optional: Tag image without the full repo name if needed for later steps
    - script: |
        docker tag donaldsontodd22/$(imageName):$(imageTag) $(imageName):$(imageTag)
      displayName: 'Tag Local Image (if needed)'

    - script: |
        echo "Docker image ready: $(imageName):$(imageTag)"
      displayName: 'Docker Image Confirmation'



    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/test-results
        docker run --rm --network shared-test-network -e TEST_ENV=${{ parameters.testEnvironment }} -e TEST_CATEGORY=${{ parameters.testCategory }} -v $(Build.ArtifactStagingDirectory)/test-results:/app/TestResults $(imageName):$(imageTag)
      displayName: 'Run Docker Image'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results (.trx)'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/test-results/*.trx'
        searchFolder: '$(Build.ArtifactStagingDirectory)/test-results'
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      displayName: 'Publish Test Results (XML)'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/test-results/*.xml'
        mergeTestResults: true
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Test Reports Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/test-results'
        ArtifactName: 'TestReports'
        publishLocation: 'Container'

    # Stop the mock server (WireMock)
    - script: docker-compose -f docker-compose.yml down --remove-orphans
      displayName: 'Stop WireMock Server'
      workingDirectory: $(Build.SourcesDirectory)/wiremock-server

    # Stop MySQL container
    - script: docker-compose -f Config/Sql/docker-compose.yml down --remove-orphans
      displayName: 'Stop MySQL container'
      workingDirectory: $(Build.SourcesDirectory)/csharp-automation-framework-playwright


